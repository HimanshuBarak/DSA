Given an array of n positive integers and a number k. Find the minimum number of swaps required to bring all the numbers less than or equal to k together.

Example 1:

Input : arr[ ] = {2, 1, 5, 6, 3} and K = 3
Output : 1
Explanation:
To bring elements 2, 1, 3 together, swap element '5' with '3'
such that final array will be- arr[] = {2, 1, 3, 6, 5}

Example 2:

Input : arr[ ] = {2, 7, 9, 5, 8, 7, 4} and K = 6 
Output :  2 
 

Your Task:
This is a function problem. The input is already taken care of by the driver code. You only need to complete the function minSwap() that takes an array (arr), sizeOfArray (n), an integer K, and return the minimum swaps required. The driver code takes care of the printing.

Expected Time Complexity: O(N).
Expected Auxiliary Space: O(1).


Constraints:
1 ≤ N ≤ 105
1 ≤ Arri, K ≤107


/////// Code /////////////////////////////

int minSwap(int *arr, int n, int k) {
    // Complet the function
    int count=0;
    
    //count the no. of values that are to be pulled together
    for(int i=0;i<n;i++)
    {
        if(arr[i]<=k)
          count++;
    }
    //no need to swap anything if only one or 0 valid values are present
    if(count==0 || count==1)
     return 0;
    
    //because we are gonna compare it with the difference in which the inital value will also be counted
    count--;
    int start=0,end=0,min_bad=INT_MAX,bad=0;
    //use the sliding window to solve this
    
    //the window which has the least bad(>k) values should be chosen for swap
    while(end <n)
    {   
        //if greater than k than a possible 
        if(arr[end]>k){
            bad++;
        }
       
        if((end-start)==count)
        {
            min_bad = min(bad,min_bad);
            if(arr[start++]>k)
               bad--;
        }
        end++;
    }
    return min_bad;
}
