Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.

There is only one repeated number in nums, return this repeated number.

You must solve the problem without modifying the array nums and uses only constant extra space.

 

Example 1:

Input: nums = [1,3,4,2,2]
Output: 2
Example 2:

Input: nums = [3,1,3,4,2]
Output: 3
Example 3:

Input: nums = [1,1]
Output: 1
Example 4:

Input: nums = [1,1,2]
Output: 1
 

Constraints:

1 <= n <= 105
nums.length == n + 1
1 <= nums[i] <= n
All the integers in nums appear only once except for precisely one integer which appears two or more times.
 
 
 Solution
 
  int findDuplicate(vector<int>& nums) {
       int index=0;
        
        for(int i=0;i<nums.size();i++)
        {
            index = abs(nums[i]);
            
            //marking the index
            nums[index]*=-1;
            // if its a duplicte multyplying with -1 will give a positive number
            if(nums[index]>0)
                return abs(nums[i]);
            
        }
        
        return -1;
    }
