 Question 
 Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.

If such an arrangement is not possible, it must rearrange it as the lowest possible order (i.e., sorted in ascending order).

The replacement must be in place and use only constant extra memory.

 

Example 1:

Input: nums = [1,2,3]
Output: [1,3,2]
Example 2:

Input: nums = [3,2,1]
Output: [1,2,3]
Example 3:

Input: nums = [1,1,5]
Output: [1,5,1]
Example 4:

Input: nums = [1]
Output: [1]
 

Constraints:

1 <= nums.length <= 100
0 <= nums[i] <= 100
 
 ///////////////////Code////////////////////////////////
 
 void nextPermutation(vector<int>& nums) {
         
        int temp,i;
        if(nums.size()!=1)
        {
          //get the index which is to be swapped  
          for( i=nums.size()-2;i>=0;i--)
            {
              
              if(nums[i]<nums[i+1])
                  break;
            }  
            // if such a index is found than swap the number with the next largest number
            if(i>=0)
            {
             int j= nums.size()-1;   
             while(j>=i)
             {
                 if(nums[j]>nums[i])
                 {
                     swap(nums[i],nums[j]);
                     break;
                 } 
                     
                 j--;
             }
             //just reverse the left out vector now   
             reverse(nums,i+1,nums.size()-1);   
            }
            else{
              //incase the array is already in descending order just reverse the array  
              reverse(nums,0,nums.size()-1);  
            }
            
        }    
        
    }

 //function to reverse the sorted vector elements   
    void reverse(vector<int>& nums,int i,int j)
    {    
         while(i<j)
         {             
             swap(nums[i],nums[j]);
             i++;
             j--;
         }
    }
