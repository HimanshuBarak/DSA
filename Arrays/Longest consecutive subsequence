Given an array Arr that contains N integers (may be positive, negative or zero). Find the product of the maximum product subarray.

Example 1:

Input:
N = 5
Arr[] = {6, -3, -10, 0, 2}
Output: 180
Explanation: Subarray with maximum product
is 6, -3, -10 which gives product as 180.
Example 2:

Input:
N = 6
Arr[] = {2, 3, 4, 5, -1, 0}
Output: 120
Explanation: Subarray with maximum product
is 2, 3, 4, 5 which gives product as 120.
Your Task:
You don't need to read input or print anything. Your task is to complete the function maxProduct() which takes the array of integers arr and n as parameters and returns an integer denoting the answer.
Note: Use 64-bit integer data type to avoid overflow.

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(1)

Constraints:
1 ≤ N ≤ 500
-102 ≤ Arri ≤ 102


//////////////////////////////////////////////////////  Code ///////////////////////////////////////////////////////////////


 int findLongestConseqSubseq(int a[], int n)
    {
      unordered_map<int ,int> umap;
      int count,temp=0;
      for(int i=0;i<n;i++)
      {
          umap[a[i]]++;
      }
      
      for(int i=0;i<n;i++)
       {   
           //check if its the first element or not
           if(umap.find(a[i]-1)==umap.end())
           {
               temp=1;
               int j=a[i]+1;
               while(umap.find(a[i]+temp)!=umap.end())
                 temp++;
           }
           count =max(temp,count);
       }
       
       return count;
    }
    
    
    
    /////////////////////////////////////Code//////////////////////////////////////////
    
     int findLongestConseqSubseq(int a[], int n)
    {
      int hash[100000];
       int count=0,temp=0;
      for(int i=0;i<=100000;i++)
       hash[i]=0;
       
      for(int i=0;i<n;i++)
      {  
         
          hash[a[i]]=a[i];
      }
      
      for(int i=0;i<=100000;i++)
      {
          if(hash[i]==0)
          {
              temp=0;
          }
          else
           {
               temp++;
              
           }
           count =max(count,temp);
      }
       
       return count;
    }
