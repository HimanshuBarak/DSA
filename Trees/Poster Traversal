postorder ==>   left--right--root




/////////////////////////////////////// Recursive Approach ////////////////////////////////////////

 void helper(TreeNode* root,vector<int> &res)
    {
         if(root==NULL)
             return ;
        
        
         helper(root->left,res);
         helper(root->right,res);
          res.push_back(root->val);
    }
    
    vector<int> postorderTraversal(TreeNode* root) {
         
        vector<int> res;
        
         helper(root,res);
        
        
        return res;
    }
    
    
    //////////////////////////////////// Iterative Approach ////////////////////////////////////
    
     vector<int> postorderTraversal(TreeNode* root) {
         
        vector<int> res;
         if(root==NULL)
            return res;
        
          stack<TreeNode* > s;
        TreeNode* curr = root;
        TreeNode* pre = NULL;
        while(curr!=NULL || !s.empty())
        {
            while(curr!=NULL)
            {
                s.push(curr);
                
                curr=curr->left;
               
            }
            
            curr = s.top();
            
            if(curr->right==NULL || curr->right==pre){
                res.push_back(curr->val);
                s.pop();
                pre=curr;
                curr=NULL;                    //isse we are not modyfying the actual tree , ik right why not it should be modified
            }
            else
                curr=curr->right;
        }
       
        return res;
    }


/////////////////////////////// 2 STACK APPROACH ////////////////////////////////////////////////////////////////////////////

class Solution {
public:
    
    vector<int> postorderTraversal(TreeNode* root) {
         
        vector<int> res;
         if(root==NULL)
            return res;
        
          stack<TreeNode* > s;
        TreeNode* curr = root;
         stack<TreeNode*> path;
         s.push(curr);
        while(!s.empty())
        {
            curr = s.top();
            
            if(!path.empty() && path.top()==curr)
            {
                res.push_back(curr->val);
                s.pop();
                path.pop();
            }
            else{
                path.push(curr);
                
                if(curr->right)
                   s.push(curr->right); 
                 if(curr->left)
                   s.push(curr->left); 
            }
        }
       
        return res;
    }
};
