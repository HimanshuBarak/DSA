Given below is a binary tree. The task is to print the top view of binary tree. Top view of a binary tree is the set of nodes visible when the tree is viewed from the top. For the given below tree

       1
    /     \
   2       3
  /  \    /   \
4    5  6   7

Top view will be: 4 2 1 3 7
Note: Return nodes from leftmost node to rightmost node.

Example 1:

Input:
      1
   /    \
  2      3
Output: 2 1 3
Example 2:

Input:
       10
    /      \
  20        30
 /   \    /    \
40   60  90    100
Output: 40 20 10 30 100
Your Task:
Since this is a function problem. You don't have to take input. Just complete the function topView() that takes root node as parameter and returns a list of nodes visible from the top view from left to right.

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(N).

Constraints:
1 ≤ N ≤ 105
1 ≤ Node Data ≤ 105

////////////////////////// SOLUTION /////////////////////////////////////////////////

class Solution
{
    public:
    /*
       The main algorithm used here is 
        
       all nodes are considered into lines and the first node in each line is the top view
       makes lines according to their distance
       
    */   
    vector<int> topView(Node *root)
    {
        //Your code here
        queue<pair<Node*,int>> q;
        Node* curr = root;
        
        map<int,int> m;
        q.push(make_pair(root,0));
        while(!q.empty())
        {   
            pair<Node*,int> p;
            p=q.front();
            
            if(m.find(p.second)==m.end()){
                m.insert({p.second,p.first->data});
            }
            q.pop();
            if(p.first->left)
            q.push(make_pair(p.first->left,p.second-1));
            if(p.first->right)
            q.push(make_pair(p.first->right,p.second+1));
            
        }
        
        vector<int> res;
        //the ordered map already stores the values in sorted list 
        /* -3 ,4
            -2,6
            -1,8
            0,9
            1,5  like this so just need to traverse this 
        */    
        for(auto itr =m.begin();itr!=m.end();itr++)
        {
            res.push_back(itr->second);
        }
        
        return res;
    }

};
