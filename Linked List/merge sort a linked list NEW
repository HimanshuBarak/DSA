
class Solution{
  public:
  //to merge the sorted lists
  Node* mergeLists(Node* l1,Node* l2)
  {
       if(l1==NULL)
        return l2;
       if(l2==NULL)
        return l1;
        
       if(l1->data <l2->data)
       {
           l1->next = mergeLists(l1->next,l2);
           return l1;
       }
       else{
           l2->next = mergeLists(l1,l2->next);
           return l2; 
       }
    }
   //to find the middle of the linked list
   Node* middleNode(Node* head) {
         
         Node* fast = head->next;
         Node* slow = head;
        
        while(fast!=NULL && fast->next!=NULL){
            fast=fast->next->next;
            slow=slow->next;
        }
        return slow;
    }
    Node* MergeSort(Node* head)
    {
            //if its a single element return it else sort
            if(head==NULL || head->next==NULL)
              return head;
            Node* mid = middleNode(head);
            Node* temp= mid->next;
            //we need to divide the list into 2 parts 
            mid->next=NULL;
            
            //sorting the left half
            Node* l1 = MergeSort(head);
            //sorting the right half
            Node* l2 =MergeSort(temp);
            //returning the merged lists
            return mergeLists(l1,l2);
        
    }
    
    //Function to sort the given linked list using Merge Sort.
    Node* mergeSort(Node* head) {
        // your code here
          
       return MergeSort(head); //passing the head and tail of the linked list;
        
    }
};
